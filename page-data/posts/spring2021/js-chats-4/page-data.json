{"componentChunkName":"component---src-components-post-post-template-js","path":"/posts/spring2021/js-chats-4/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"what-is-webrtc\" style=\"position:relative;\"><a href=\"#what-is-webrtc\" aria-label=\"what is webrtc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is WebRTC?</h2>\n<p>WebRTC (Web Real-Time Communication) is an open-source project to develop\ntechnology that enables websites and web apps to have peer-to-peer (P2P)\ncommunication with video, audio, and other arbitrary data.</p>\n<h3 id=\"who-uses-webrtc\" style=\"position:relative;\"><a href=\"#who-uses-webrtc\" aria-label=\"who uses webrtc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Who uses WebRTC?</h3>\n<p>(not an exhaustive list)</p>\n<ul>\n<li>Google Meet</li>\n<li>Facebook Messenger</li>\n<li>Discord</li>\n<li>Twilio</li>\n<li>us during the rest of this workshop</li>\n</ul>\n<h2 id=\"why-webrtc\" style=\"position:relative;\"><a href=\"#why-webrtc\" aria-label=\"why webrtc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why WebRTC?</h2>\n<p>WebRTC is useful because implementing P2P connections is very difficult!\nImagine the following non-P2P scenario: We are trying to visit a website like\n<a href=\"https://google.com\">google.com</a>.  What steps do we need to take in order to do\nso?</p>\n<ol>\n<li>resolve the domain name to an IP address using DNS</li>\n<li>make a request to that IP address</li>\n<li>done! ✅</li>\n</ol>\n<p>Now let's imagine that we're trying to connect to a peer:</p>\n<ul>\n<li>no domain name, so we can't use DNS to get their IP address ❌</li>\n<li>\n<p>we can ask for their IP address!</p>\n<ul>\n<li>but, the IP address they give us is their private IP, which is meaningless\noutside of their local area network (LAN) ❌</li>\n</ul>\n</li>\n<li>… cry</li>\n</ul>\n<h3 id=\"p2p-problems\" style=\"position:relative;\"><a href=\"#p2p-problems\" aria-label=\"p2p problems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>P2P problems</h3>\n<p>We can clearly see some issues that arise with setting up a peer-to-peer\nconnection:</p>\n<ol>\n<li>How do I get my public IP?</li>\n<li>How do I send my public IP to my peer?</li>\n<li>Assuming my peer has gotten my public IP, how do we know what data formats\neach peer can support?</li>\n<li>How do our packets even travel back and forth between us?</li>\n</ol>\n<h3 id=\"webrtc-to-the-rescue\" style=\"position:relative;\"><a href=\"#webrtc-to-the-rescue\" aria-label=\"webrtc to the rescue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebRTC to the rescue!</h3>\n<p>WebRTC provides solutions for each of these problems.</p>\n<blockquote>\n<ol>\n<li>How do I get my public IP?</li>\n</ol>\n</blockquote>\n<p>WebRTC uses <a href=\"https://en.wikipedia.org/wiki/STUN\">STUN (Session Traversal Utilities for\nNAT)</a>, which allows you to make a request\nto a STUN server. The server then replies with your public IP.</p>\n<blockquote>\n<ol start=\"2\">\n<li>How do I send my public IP to my peer?</li>\n</ol>\n</blockquote>\n<p>Some terminology: <strong>signaling</strong> is the discovery and negotiation process by\nwhich a peer-to-peer connection is established</p>\n<p>A <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling\">signaling server</a></strong>\nis a server by which signaling takes place.  It helps establish a connection\nbetween two peers by relaying information between them.  So, we can use a\nsignaling server to send our public IP.</p>\n<p>Note that WebRTC doesn't specify any particular method for transporting the\nsignaling information. We could use any reliable form of sending information,\nlike HTTP, WebSocket, email, or even a carrier pigeon.</p>\n<blockquote>\n<ol start=\"3\">\n<li>Assuming my peer has gotten my public IP, how do we know what data formats\neach peer can support?</li>\n</ol>\n</blockquote>\n<p>This information can also be exchanged through the signaling server.  The\ncaller creates an <strong>offer</strong> with a <strong>session description</strong>, and the callee can\nrespond with an <strong>answer</strong> message.  The session description is in\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/SDP\">SDP</a> format, and can\nlook something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">v=0\no=alice 2890844526 2890844526 IN IP4 host.anywhere.com\ns=\nc=IN IP4 host.anywhere.com\nt=0 0\nm=audio 49170 RTP/AVP 0\na=rtpmap:0 PCMU/8000\nm=video 51372 RTP/AVP 31\na=rtpmap:31 H261/90000\nm=video 53000 RTP/AVP 32\na=rtpmap:32 MPV/90000</code></pre></div>\n<p>For the audio encoding in this example, we see\n<a href=\"https://en.wikipedia.org/wiki/G.711\">PCMU</a>.  For the video encoding, there are\ntwo options: <a href=\"https://en.wikipedia.org/wiki/H.261\">H261</a> and\n<a href=\"https://tools.ietf.org/html/rfc2250\">MPV</a>.</p>\n<blockquote>\n<ol start=\"4\">\n<li>How do our packets even travel back and forth between us?</li>\n</ol>\n</blockquote>\n<p>WebRTC uses a framework called <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/ICE\">ICE (Interactive Connectivity\nEstablishment)</a>.  The\nframework's algorithm finds the lowest-latency path for connecting two peers,\ntrying various options in order.  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate\"><strong>ICE\ncandidates</strong></a>\nare used to describe protocols and routing, and both peers exchange them until\nthey mutually agree on a particular candidate.</p>\n<p>Then, WebRTC uses that candidate to initiate the peer-to-peer connection.</p>\n<h2 id=\"building-a-webrtc-app\" style=\"position:relative;\"><a href=\"#building-a-webrtc-app\" aria-label=\"building a webrtc app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building a WebRTC app</h2>\n<p>To learn some of the basic WebRTC API, we will build a simple video calling\napplication!</p>\n<div align=center>\n<video autoplay loop muted playsinline style=\"max-width: 900; width: 100%\">\n<source src=\"/250435ed4475a4c01fdfc4a9ce80788d/demo.mp4\" type=\"video/mp4\">\n</video>\n<p><em>Our P2P video calling app</em></p>\n</div>\n<p>Let's build this app ourselves! We have created some starter code for you to\nfollow along. Download it here: </p>\n<p><a href=\"https://github.com/uclaacm/js-chats-s21/blob/main/webrtc/starter.zip\">WebRTC video/audio app starter\ncode</a></p>\n<p>To set it up, run </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span>\nnode server.js</code></pre></div>\n<p>Then, visit <code class=\"language-text\">localhost:3000</code>.</p>\n<p>The starter code already has the built-in functionality of showing online\nusers. There is also a class called <code class=\"language-text\">RelayServer</code> that acts as our signaling\nservice to communicate the necessary setup information for initial connection\nbetween the peers. </p>\n<p>What information do we need in order to establish a connection?  Both peers\nwill need the following information: </p>\n<ul>\n<li>My own public IP</li>\n<li>My own video/audio encoding information (media information)</li>\n<li>The other's public IP</li>\n<li>The other's video/audio encoding information</li>\n</ul>\n<p>In the code walk-through, we will use the following table to keep track of the\ninformation available to establishing the WebRTC connection.</p>\n<table>\n<thead>\n<tr>\n<th>Peer 1 (Caller)</th>\n<th>Peer 2 (Callee)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>My public IP</td>\n<td>My public IP</td>\n</tr>\n<tr>\n<td>My own media info</td>\n<td>My own media info</td>\n</tr>\n<tr>\n<td>Peer 2's public IP</td>\n<td>Peer 1's public IP</td>\n</tr>\n<tr>\n<td>Peer 2's media info</td>\n<td>Peer 1's media info</td>\n</tr>\n</tbody>\n</table>\n<p>Once all the items of the table are available, a connection can be established. </p>\n<p>WebRTC specifies a set of APIs that are implemented by browsers. These APIs\nsignificantly reduce the amount of code we have to write and we do not need to\ncare about the implementation details of the protocols. </p>\n<h3 id=\"stun-server-and-the-rtcpeerconnection-object\" style=\"position:relative;\"><a href=\"#stun-server-and-the-rtcpeerconnection-object\" aria-label=\"stun server and the rtcpeerconnection object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>STUN server and the <code class=\"language-text\">RTCPeerConnection</code> Object</h3>\n<p>The starting point of our WebRTC connection is the <code class=\"language-text\">RTCPeerConnection</code> object. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> rtcConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCPeerConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    iceServers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            urls<span class=\"token operator\">:</span> <span class=\"token string\">'stun:stun.stunprotocol.org'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">RTCPeerConnection</code> object represents our connection. The object provides\nuseful functions for us to get and set necessary information for setting up the\nconnection. </p>\n<p>We need a STUN server to tell us about our public IP. Here, we are using a\npublic STUN server with the domain name of stun.stunprotocol.org. There are\nalso other public STUN servers available as well.</p>\n<p>The nice thing about WebRTC is that the APIs abstract away the details of\nhandling communication with STUN servers and with peers. We do not need to\nhandle the request to obtain our public IP ourselves. The <code class=\"language-text\">RTCPeerConnection</code>\nobject will handle it for us. </p>\n<p>So far, we have obtained these information for the connection:</p>\n<table>\n<thead>\n<tr>\n<th>Peer 1 (Caller)</th>\n<th>Peer 2 (Callee)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>My public IP ✅</td>\n<td>My Public IP ✅</td>\n</tr>\n<tr>\n<td>My own media info</td>\n<td>My own media info</td>\n</tr>\n<tr>\n<td>Peer 2's public IP</td>\n<td>Peer 1's public IP</td>\n</tr>\n<tr>\n<td>Peer 2's media info</td>\n<td>Peer 1's media info</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"turning-on-our-camera-and-microphone\" style=\"position:relative;\"><a href=\"#turning-on-our-camera-and-microphone\" aria-label=\"turning on our camera and microphone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Turning on our camera and microphone</h3>\n<p>Before we can start calling, we need to make sure our camera and microphone\nworks by obtaining the \"streams\" from these hardware. The <code class=\"language-text\">setUpMyVideo</code>\nfunction handles the set up of the media streams. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setUpMyVideo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>First, we need to obtain the user's permission to use their camera and microphone. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// obtain video/audio permission</span>\n<span class=\"token keyword\">const</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    audio<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    video<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you do not want audio, you can set <code class=\"language-text\">audio: false</code>. The <code class=\"language-text\">getUserMedia</code>\nfunction will prompt the user for the permission to use their camera and\nmicrophone. It returns a Promise (that's why we <code class=\"language-text\">await</code> for it) that resolves\nto the media stream. </p>\n<p>Then, we need to show the user their own video. We need to hook up our stream\nto a <code class=\"language-text\">&lt;video></code> tag on the DOM. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#localVideo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lastly, we need to tell our RTC connection object about the available streams\nthat we can send over to our peer. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">stream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track</span> <span class=\"token operator\">=></span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">getTracks</code> method returns the two tracks that we have, the audio track and\nthe video track. We pass them to the RTC connection object using the method\n<code class=\"language-text\">addTrack</code>.</p>\n<p>The complete function looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setUpMyVideo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// obtain video/audio permission</span>\n    <span class=\"token keyword\">const</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        audio<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        video<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// set the camera video to show in a &lt;video> tag!</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#localVideo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// tell our RTC Connection about our video source</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track</span> <span class=\"token operator\">=></span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"caller-ringing-our-callee\" style=\"position:relative;\"><a href=\"#caller-ringing-our-callee\" aria-label=\"caller ringing our callee permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caller ringing our callee</h3>\n<p>In the skeleton code, the ID of the selected peer being called is stored in a\nglobal variable <code class=\"language-text\">selectedUser</code>. When caller clicks the call button, we\ninitialize the process of starting a WebRTC connection.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">callButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first step for the caller is to \"ring\" the callee to let callee know about\nthe call. The \"ringing\" is represented by an \"offer\" object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> localOffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">createOffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>According to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\">MDN\ndocumentation</a>,\nthe \"offer\" object contains: </p>\n<blockquote>\n<p>information about any MediaStreamTracks already attached to the WebRTC\nsession, codec, and options supported by the browser, and any candidates\nalready gathered by the ICE agent...</p>\n</blockquote>\n<p>This contains all the information about of media, i.e. our video/audio stream.\nThen, we need to inform caller's RTC connection object about the current media\ninfo. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>localOffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The name <code class=\"language-text\">setLocalDescription</code> implies that we are setting our own media\ninformation.</p>\n<p>You might be asking, why are we doing this? Why did we obtain all the media\ninformation from caller's connection object and then hand it right back to it?\n<code class=\"language-text\">setLocalDescription</code> allows you to change the configuration in the middle of a\ncall (turn off video, or change input device for instance). Instead of making\nthis configuration implicit, might as well make it explicit for the initial\nconnection as well.  That's why there is an extra step to set it at the\nbeginning. </p>\n<p>At this point, we got the media information for our caller. </p>\n<table>\n<thead>\n<tr>\n<th>Peer 1 (Caller)</th>\n<th>Peer 2 (Callee)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>My public IP ✔️</td>\n<td>My Public IP  ✔️</td>\n</tr>\n<tr>\n<td>My own media info ✅</td>\n<td>My own media info</td>\n</tr>\n<tr>\n<td>Peer 2's public IP</td>\n<td>Peer 1's public IP</td>\n</tr>\n<tr>\n<td>Peer 2's media info</td>\n<td>Peer 1's media info</td>\n</tr>\n</tbody>\n</table>\n<p>Then, we send our media info to our peer through the relay server, aka our\nsignaling service.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">relayServer<span class=\"token punctuation\">.</span><span class=\"token function\">sendPeerMediaOffer</span><span class=\"token punctuation\">(</span>selectedUser<span class=\"token punctuation\">,</span> localOffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The complete event listener looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">callButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    callButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// create a connection offer, which contains our video/audio info</span>\n    <span class=\"token keyword\">const</span> localOffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">createOffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// tell our connection object about our video/audio info</span>\n    <span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>localOffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// tell our callee about our video/audio info</span>\n    relayServer<span class=\"token punctuation\">.</span><span class=\"token function\">sendPeerMediaOffer</span><span class=\"token punctuation\">(</span>selectedUser<span class=\"token punctuation\">,</span> localOffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"callee-picking-up-the-call-from-caller\" style=\"position:relative;\"><a href=\"#callee-picking-up-the-call-from-caller\" aria-label=\"callee picking up the call from caller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callee picking up the call from caller</h3>\n<p>The callee knows the caller is calling when the callee receives the \"offer\"\nobject from callee through the relay server:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">relayServer<span class=\"token punctuation\">.</span><span class=\"token function\">onPeerSendMediaOffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first step is to tell callee's connection object about the peer's media\ninformation. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> peerOffer <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>offer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>peerOffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The name <code class=\"language-text\">setRemoteDescription</code> implies we are setting our peer's media\ninformation. </p>\n<table>\n<thead>\n<tr>\n<th>Peer 1 (Caller)</th>\n<th>Peer 2 (Callee)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>My public IP ✔️</td>\n<td>My Public IP  ✔️</td>\n</tr>\n<tr>\n<td>My own media info ✔️</td>\n<td>My own media info</td>\n</tr>\n<tr>\n<td>Peer 2's public IP</td>\n<td>Peer 1's public IP</td>\n</tr>\n<tr>\n<td>Peer 2's media info</td>\n<td>Peer 1's media info ✅</td>\n</tr>\n</tbody>\n</table>\n<p>Then, we need to create an \"answer\" object that will be sent back to the caller.\nThe answer object, just like the offer object, also contains all the media information.\nWe need to tell callee's connection object about it as well. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>Peer 1 (Caller)</th>\n<th>Peer 2 (Callee)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>My public IP ✔️</td>\n<td>My Public IP  ✔️</td>\n</tr>\n<tr>\n<td>My own media info ✔️</td>\n<td>My own media info ✅</td>\n</tr>\n<tr>\n<td>Peer 2's public IP</td>\n<td>Peer 1's public IP</td>\n</tr>\n<tr>\n<td>Peer 2's media info</td>\n<td>Peer 1's media info ✔️</td>\n</tr>\n</tbody>\n</table>\n<p>We sent out answer back to our peer. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">relayServer<span class=\"token punctuation\">.</span><span class=\"token function\">sendPeerMediaAnswer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The complete handler is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">relayServer<span class=\"token punctuation\">.</span><span class=\"token function\">onPeerSendMediaOffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'receive MediaOffer'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// caller's video/audio info</span>\n    <span class=\"token keyword\">const</span> peerOffer <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>offer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// tell our connection object about the caller's video/audio info</span>\n    <span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>peerOffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// create a connection answer, which contains our video/audio info</span>\n    <span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">createAnswer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// tell our connection object about our video/audio info</span>\n    <span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// tell our caller about our video/audio info</span>\n    relayServer<span class=\"token punctuation\">.</span><span class=\"token function\">sendPeerMediaAnswer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"caller-confirming-callees-pick-up\" style=\"position:relative;\"><a href=\"#caller-confirming-callees-pick-up\" aria-label=\"caller confirming callees pick up permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caller confirming callee's pick up</h3>\n<p>The caller will receive the answer object from the callee, meaning they are\npicking up that call. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">relayServer<span class=\"token punctuation\">.</span><span class=\"token function\">onPeerSendMediaAnswer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'receive MediaAnswer'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// tell our connection about the callee's video/audio info</span>\n    <span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>Peer 1 (Caller)</th>\n<th>Peer 2 (Callee)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>My public IP ✔️</td>\n<td>My Public IP  ✔️</td>\n</tr>\n<tr>\n<td>My own media info ✔️</td>\n<td>My own media info</td>\n</tr>\n<tr>\n<td>Peer 2's public IP</td>\n<td>Peer 1's public IP</td>\n</tr>\n<tr>\n<td>Peer 2's media info ✅</td>\n<td>Peer 1's media info ✔️</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"network-information-exchange\" style=\"position:relative;\"><a href=\"#network-information-exchange\" aria-label=\"network information exchange permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Network information exchange</h3>\n<p>The only piece missing in setting up the connection is knowing the peer's\npublic IP address. But as we have said before, WebRTC handles all the public IP\nfetching with the STUN server. How do we actually get our own public IP and\nsend it to our peer?</p>\n<p>To do so, we use the <code class=\"language-text\">onicecandidate</code> event handler on the WebRTC connection\nobject.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onicecandidate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// send our peer about our connection preference.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When our WebRTC connection object obtains the public IP from the STUN server,\nthis event handler is invoked. All we need to do is to send our network\ninformation to the other peer. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onicecandidate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// send our peer about our connection preference.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span>\n        relayServer<span class=\"token punctuation\">.</span><span class=\"token function\">sendIceCandidateToPeer</span><span class=\"token punctuation\">(</span>selectedUser<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>On the peer side, we will receive the ICE candidate hand it to the WebRTC\nconnection object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">relayServer<span class=\"token punctuation\">.</span><span class=\"token function\">onPeerSendIceCandidate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'receive ICE from peer'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// create an ICE candidate object</span>\n    <span class=\"token keyword\">const</span> candidate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCIceCandidate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// tell our RTC connection object about our peer's ICE candidate</span>\n    <span class=\"token keyword\">await</span> rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addIceCandidate</span><span class=\"token punctuation\">(</span>candidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>At this point, we have obtained all <del>the dragon balls</del> the information we\nneed to establish our connection. </p>\n<table>\n<thead>\n<tr>\n<th>Peer 1 (Caller)</th>\n<th>Peer 2 (Callee)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>My public IP ✔️</td>\n<td>My Public IP  ✔️</td>\n</tr>\n<tr>\n<td>My own media info ✔️</td>\n<td>My own media info</td>\n</tr>\n<tr>\n<td>Peer 2's public IP ✅</td>\n<td>Peer 1's public IP ✅</td>\n</tr>\n<tr>\n<td>Peer 2's media info ✔️</td>\n<td>Peer 1's media info ✔️</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"hooking-up-peers-media-stream\" style=\"position:relative;\"><a href=\"#hooking-up-peers-media-stream\" aria-label=\"hooking up peers media stream permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooking up peer's media stream</h3>\n<p>Now that the WebRTC connection object obtained all the necessary information,\nit will go ahead and establish the connection and we do not have to worry about\nhow it is done. </p>\n<p>When the connection is established, there will be a stream of the peer's\naudio/video. We need to show the audio/video still. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">rtcConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'track'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'got track'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>stream<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// put our peer's stream onto our video</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#remoteVideo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you have a fully functioning video calling app yo~</p>\n<p>Notice that throughout the process, we do not know what is going on with the\n<code class=\"language-text\">relayServer</code>. In our demo, we used WebSocket to pass the information to our\npeer. But again, it does not matter what technology you use in the signaling\nserver as long as it delivers all the necessary information to the other user.</p>\n<p>As a final note, our application does not work across the Internet yet! For\ncomputers to enable video and audio permission, the website needs to be under\nHTTPS. You can deploy it under a server with a TLS certificate for it to work\nacross the Internet. But that is beyond the scope of our workshop. </p>\n<h2 id=\"challenge-to-improve-our-app\" style=\"position:relative;\"><a href=\"#challenge-to-improve-our-app\" aria-label=\"challenge to improve our app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge to improve our app</h2>\n<p>Here are some challenges for you to further improve our app.\nNumber of ★ indicate difficulty. </p>\n<ol>\n<li>(★) When the caller calls, the callee just pick up by default.  We did not\nactually let the user choose whether to pick up or not.  Can you obtain the\ncallee's user consent through a pop up first before \"answering\" the call?\n(a simple implementation of pop up is the built-in <code class=\"language-text\">confirm</code> function)</li>\n<li>(★★★) If your peer gets annoying, can you mute them? (hint: maybe by manipulating\nthe <code class=\"language-text\">&lt;video></code> element?)</li>\n<li>(★★★★★) If you are talking to someone else, can you mute yourself? </li>\n</ol>\n<h2 id=\"webrtc-beyond-video-calling\" style=\"position:relative;\"><a href=\"#webrtc-beyond-video-calling\" aria-label=\"webrtc beyond video calling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebRTC beyond video calling</h2>\n<p>WebRTC actually supports sending any arbitrary data format. So there are a lot\nof other application of WebRTC as well. Here, I would like to show you a very\nsimple yet useful WebRTC application that smartly makes use of its mechanism. </p>\n<p><a href=\"https://snapdrop.net\">snapdrop.net</a> is a simple web application that allows\nyou to transfer arbitrary files across devices under the same network (the same\nWiFi or ethernet for example) that is behind the same NAT. For those who uses\nApple devices, this is simply AirDrop, but it works on any device with a\nbrowser that supports WebRTC.</p>\n<p>How does it work then? </p>\n<ol>\n<li>When a user logins into the server, the server keeps a dictionary of public IP to\na list of private IPs.</li>\n<li>The user will be able to see other users under the same public IP, meaning that\nthey are under the same network.</li>\n<li>Since they are under the same network, they can connect to each other directly\nwith their private IP. A WebRTC connection is established directly between the\ntwo user and the data is transmitted that way.</li>\n</ol>\n<p>Note that the traffic between the user does not get onto the Internet at all!\nThe connection is established through the same WiFi/ethernet router that the 2\ndevices are connected to. This brings great performance since the connection\npath is short, meaning there is low latency and it does not put much traffic\npressure onto the Internet or get bottlenecked by the outside Internet. </p>\n<p>You can read the source code to find out how they do it, it is not that long\nactually! Focus on two files: \"server/index.js\" and\n\"client/scripts/network.js\".</p>\n<p>This is the benefit brought by WebRTC, super cool right?</p>","frontmatter":{"date":"2021-04-26T00:00:00.000Z","title":"Introduction to WebRTC","subtitle":"JavaScript Chats Hack Session 4 Spring 2021"}}},"pageContext":{"slug":"/posts/spring2021/js-chats-4/"}}}