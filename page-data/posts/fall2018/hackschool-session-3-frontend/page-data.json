{"componentChunkName":"component---src-components-post-post-template-js","path":"/posts/fall2018/hackschool-session-3-frontend/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>This session we'll be making a super cool web page that shows a clock that\nchanges color based on the current time. But first we need to understand exactly\nwhat this \"DOM\" thing is.</p>\n<h2 id=\"the-dom\" style=\"position:relative;\"><a href=\"#the-dom\" aria-label=\"the dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The DOM</h2>\n<p>So, \"DOM\" stands for \"Document Object Model\" and this is basically a <strong>concept</strong>\n(read: not anything concrete, not a specific file, not a certain browser, not\nanything like that) that thinks about HTML documents and web pages as a\nhierarchy of parent components and child components. Generally, the most\nparent-level \"component\" would be the <code class=\"language-text\">&lt;html></code> tag, containing two children: a\n<code class=\"language-text\">&lt;head></code> and a <code class=\"language-text\">&lt;body></code>. Also generally, the <code class=\"language-text\">body</code> component will contain many,\nmany children.</p>\n<p>Something that tripped me up wrapping my head around the DOM was: <em>\"Ok, well</em>\n<em>what's the alternative then? How is the \"DOM\" different from the actual HTML</em>\n<em>page? They look absolutely identical.\"</em></p>\n<p>Well, in most cases, they will! But let's take an example (absolutely beautiful)\nweb page:</p>\n<p><img src=\"https://lh6.googleusercontent.com/9cfjehIDb6_rYkUgq8bf_-skpsxf8WexJ0E0fwfsL7jyjYExLX6-2CYtx-cEyfJpUCLPx0u3LPLBOf1bmpnbFlgOVG6o3mjIDNlS3A7Uow_5JwqBnhLvjYdm0PCB2l8aCcUea79Y\" alt=\"dog.png\"></p>\n<p>This is what the browser returns to us, as the user. It parses a certain HTML\nfile and generates this output. This is <strong>not</strong> the DOM! This is the web page!</p>\n<p>In the HTML file, we have a <code class=\"language-text\">head</code> and a <code class=\"language-text\">body</code> and within that body we have a heading <code class=\"language-text\">h1</code>, an image <code class=\"language-text\">img</code>, and a paragraph <code class=\"language-text\">p</code>. This is a pretty simple web page and the structure of the HTML file is not at all complicated. But this is still <strong>not</strong> the DOM! What's the difference?</p>\n<p>Well, let's say that I made a mistake in my HTML file. Whoops! I accidentally\nforgot to close my <code class=\"language-text\">&lt;p></code> tag, oh no! Now my HTML file isn't valid anymore!\nBut... when I go into Google Chrome, everything's fine! What gives?</p>\n<p>This is where the differences between the HTML (the \"source code\" if you will)\nand the DOM start to become apparent. The DOM is the representation the browser,\nand ultimately, the user, have of a certain web page. And so, if the browser is\nsmart and/or kind enough, it will say \"Oh, hey, you left out the closing p tag\nhere, but when I'm making the DOM, I'm pretty sure I knew what you meant so my\nDOM is still just gonna have a regular paragraph, cool? üëå\" And we say \"Yes,\nvery cool thanks!!\" (Don't do this in public, for some reason people are\nuncomfortable if you talk to your computer ü§∑‚Äç)</p>\n<p>The difference in the HTML file and the DOM become absolutely <strong>huge</strong> when you\nstart getting into JavaScript that renders HTML for you like React or Vue (this\nis for another workshop though, one thing at a time!). The HTML file is often\nincredibly simple, containing only a single <code class=\"language-text\">&lt;div></code> named \"app\" and some meta\ninformation in the <code class=\"language-text\">&lt;head></code> whereas the DOM will be a fully-functional web app\nwith headers and sidebars and images of dogs everywhere!</p>\n<p>That brings us to *drum roll* <strong>the DOM!!!</strong>, at last the elusive creature.</p>\n<h2 id=\"step-1-setup\" style=\"position:relative;\"><a href=\"#step-1-setup\" aria-label=\"step 1 setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Setup</h2>\n<p>Go ahead and open up Sublime. We're getting ready to build! ‚ö°Ô∏è</p>\n<h2 id=\"step-2-html\" style=\"position:relative;\"><a href=\"#step-2-html\" aria-label=\"step 2 html permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: HTML</h2>\n<p>Before doing anything, let's save our file and get our directories set up!</p>\n<p>Save the empty file by pressing <code class=\"language-text\">Command+S</code> or going to \"File\" > \"Save\" in the\nSublime toolbar. This will bring up a dialog/popup that allows you to save your\nfile, nothing new to you most likely.</p>\n<p>Navigate to your <strong>Desktop</strong> or wherever you're going to keep your folders for\nall your cool CS projects and kick-ass code. üòé</p>\n<p>If you're on a Mac, you should see a button in the lower left hand corner of\nFinder that says \"New Folder.\" We're going to use that. Click \"New Folder\" and\nname the folder <code class=\"language-text\">hexclock</code>.</p>\n<p>Now, name the file inside the folder <code class=\"language-text\">index.html</code>.</p>\n<p>Make sure to give the proper extension (<code class=\"language-text\">.html</code>) so that both Sublime and the\nbrowser know that this is an HTML file!</p>\n<h3 id=\"general-structure\" style=\"position:relative;\"><a href=\"#general-structure\" aria-label=\"general structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>General Structure</h3>\n<p>Even though the final product is gonna be super snazzy, we don't a super complex\nHTML file for this one. It mostly just consists of a big clock time, a paragraph\nto show the current color, and a button to change it all. This is going to all\nbe in the <code class=\"language-text\">body</code> of the page and the <code class=\"language-text\">head</code> will be even more simple, just\ncontaining a title and linking to the CSS file.</p>\n<p>Without further adieu, add this to your <code class=\"language-text\">index.html</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Hex Clock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Notice that the body is empty right now! Let's fix that.</p>\n<h3 id=\"body-content\" style=\"position:relative;\"><a href=\"#body-content\" aria-label=\"body content permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Body Content</h3>\n<p>We want a button so our user can change the \"color modes\" of our clock, some big\ntext showing the current time, and then some smaller text somewhere on the\nbottom probably showing the current color of the clock.</p>\n<p>Sounds pretty straightforward to me! Add this to your <code class=\"language-text\">body</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>changeColorMode<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Change color mode!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clock<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>00:00:00<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>If you need a refresher from our first workshop, the <code class=\"language-text\">id</code> attributes are how you\ntarget a specific element. Before, we used this for CSS styling, but this time\naround, it's even more important! This time, we'll be using the <code class=\"language-text\">id</code> attributes\nto manipulate the DOM! We need a unique <code class=\"language-text\">id</code> for each of our elements for easier\nmanipulation and since this is a smaller web page, it's no problem at all to\nmake these IDs. üí™</p>\n<p>Believe it or not, our HTML file is (almost mostly) done! Let's move on to\nstyling.</p>\n<h2 id=\"step-3-styles\" style=\"position:relative;\"><a href=\"#step-3-styles\" aria-label=\"step 3 styles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Styles</h2>\n<p>Create a new file called <code class=\"language-text\">style.css</code> in the same <code class=\"language-text\">hexclock</code> directory we made.\nYou want this to be in the same folder as the <code class=\"language-text\">index.html</code> at any rate.</p>\n<h3 id=\"fonts\" style=\"position:relative;\"><a href=\"#fonts\" aria-label=\"fonts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fonts</h3>\n<p>We here at ACM are big on branding! And like any good/bad developers we love our\nfonts. ‚úèÔ∏è We're gonna be importing our main font \"Poppins\" from Google Fonts.</p>\n<p>Add this line to the beginning of your <code class=\"language-text\">style.css</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"https://fonts.googleapis.com/css?family=Poppins:700\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>This basically loads in the Poppins font (at a weight of 700 in case you\nwondering about the number) so that we can use it in our styles super simply.</p>\n<h3 id=\"body-styles\" style=\"position:relative;\"><a href=\"#body-styles\" aria-label=\"body styles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Body Styles</h3>\n<p>I'm a big fan of having no margin, no padding <code class=\"language-text\">body</code>s. To use our lovely font\nPoppins imported above, we're just gonna treat it like any other font, with the\nexception that you have to put quotes around its name when referencing it.</p>\n<p>Copy and paste this CSS rule into your file:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Poppins\"</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 64px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you're not familiar with flex boxes, well get ready because next week we're\ngonna have a whole workshop on the magic and the madness of CSS centering. For\nnow, just know that the body is going to align everything nice and pretty for\nus. ‚ú®‚ú®‚ú®</p>\n<h3 id=\"paragraph-and-button\" style=\"position:relative;\"><a href=\"#paragraph-and-button\" aria-label=\"paragraph and button permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Paragraph and Button</h3>\n<p>These styles are pretty simple. Just add the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1em 2em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Poppins\"</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The button styles are just to give it some nice padding so it looks big and\nclickable (and to give it that good branding üöÄ).</p>\n<h3 id=\"linking\" style=\"position:relative;\"><a href=\"#linking\" aria-label=\"linking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linking</h3>\n<p>Last step for styling. We need to link the <code class=\"language-text\">style.css</code> file into the\n<code class=\"language-text\">index.html</code> so it can get our sweet stylings.</p>\n<p>Open up your <code class=\"language-text\">index.html</code> file and add the following into the <code class=\"language-text\">&lt;head></code>\ncomponent:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"Ô∏è-pit-stop-Ô∏è\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-pit-stop-%EF%B8%8F\" aria-label=\"Ô∏è pit stop Ô∏è permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‚ö†Ô∏è Pit Stop ‚ö†Ô∏è</h3>\n<p>Haha, I lied. <em>One more</em> step for styling. Just one, I promise!</p>\n<p>Double check that your <code class=\"language-text\">index.html</code> file looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Hex Clock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>changeColorMode<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Change color mode!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clock<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>00:00:00<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>And your <code class=\"language-text\">style.css</code> like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"https://fonts.googleapis.com/css?family=Poppins:700\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Poppins\"</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 64px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1em 2em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Poppins\"</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And if you have any questions at all, even if your files are fine, <strong>ask a</strong>\n<strong>mentor</strong>! We're here to help!</p>\n<h2 id=\"step-4-scripting\" style=\"position:relative;\"><a href=\"#step-4-scripting\" aria-label=\"step 4 scripting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Scripting</h2>\n<p>Alrighty, folks. The time has arrived.</p>\n<p><strong>JavaScript</strong></p>\n<h3 id=\"baby-steps-\" style=\"position:relative;\"><a href=\"#baby-steps-\" aria-label=\"baby steps  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Baby Steps üë∂</h3>\n<p>First things first! Create a file inside the <code class=\"language-text\">hexclock</code> directory called\n<code class=\"language-text\">script.js</code>.</p>\n<h3 id=\"no-coding-time\" style=\"position:relative;\"><a href=\"#no-coding-time\" aria-label=\"no coding time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No-Coding Time</h3>\n<p>Ok, so this next part is all conceptual. But that doesn't mean it's easy! So\nlisten up!</p>\n<p><em>How do you turn a time into a color?</em></p>\n<p>If you are confused about this, as you probably should be, then keep reading!\nLet's first take a little detour into how time works. ‚è∞</p>\n<p>It's 6:30:45 pm right now (even if it's not, pretend!). If it's 6:30:45 pm, then\nin military/24-clock time, that means that it's 18:30:45, meaning that it is the\n18th hour of the day, the 30th minute of the hour, and the 45th second of the\nminute. There are 24 hours in one day, 60 minutes in one hour, and 60 seconds in\none minute.</p>\n<p>Ok, that was enough <em>time</em> for that. Let's talk about color. üåà</p>\n<p>Computers think about color in many different ways. But one of the most common\nis called \"RGB\" which stands for \"red, green, and blue.\" This just means that\nthe computer thinks that every color can be broken up into some amount of red,\nsome amount of green, and some amount of blue. When you combine these colors,\nyou get a whole brand new color to look at.</p>\n<p>For example, white is red, green, and blue all maxed out. Black is red, green,\nand blue all at 0. But what exactly do I mean by \"maxed out\"? There's a certain\n<strong>number</strong> for red???</p>\n<p>Yes! And that number is 255, for very math-y, computer science-y reasons.\nReasons that I won't be going over today, but you can read about\n<a href=\"https://en.wikipedia.org/wiki/RGB_color_model#Numeric_representations\">here</a> if\nyou want feed your brain extra well today! üß†</p>\n<p>So, for now, let's just go under the assumption there are 255 different values for\nred. 0 is no red, 255 is <strong><em>maximum</em></strong> red. The same goes for green and blue.\nSo, to make pure red, you would have an RGB representation of:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">red = 255\ngreen = 0\nblue = 0</code></pre></div>\n<p>This gives you 100% pure, blinding red, and absolutely no green or blue. (Note\nthat most pretty, nice to look at colors fall somewhere within the range of 255\nfor all three values).</p>\n<p>Back to time!</p>\n<p>If the above was confusing at all, there's only one thing I want you to take\naway from it:</p>\n<ol>\n<li>You can measure time and you can measure color.</li>\n</ol>\n<p>If you can measure how many hours there are in a day out of 24 hours per day,\nand you can measure how much red there is out 255 different values for red, you\ncan make each a fraction and convert!</p>\n<p>So, if it was noon (the 12th hour) this would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">12/24 = 0.5</code></pre></div>\n<p>And converting to red, it would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0.5 * 255 = 127.5</code></pre></div>\n<p>So, to complete our Alice In Wonderland mathematics, <strong>noon is half red</strong>. So\nsimple right? üé©üê∞üçµ</p>\n<p>In math, this process is called <em>mapping</em>. We are mapping the current hour to a\nvalue of red, the current minute to a value of green, and the current second to\na value of blue.</p>\n<h3 id=\"coding-time\" style=\"position:relative;\"><a href=\"#coding-time\" aria-label=\"coding time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coding Time!</h3>\n<p>Time to get back to those keyboards.</p>\n<p>We need to use the DOM to get the elements we defined in our HTML file. To do\nthis, start off with:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So the <code class=\"language-text\">time</code> variable is where we are going to be setting the current time\n(i.e. 6:30:45 pm);</p>\n<p>But we need more than just time! We need :</p>\n<ol>\n<li>a way to access the button to see if it was clicked</li>\n<li>a way to show the current color being displayed</li>\n<li>a background to put that color on</li>\n</ol>\n<p>So, define three more variables by accessing the <code class=\"language-text\">document</code> object's\n<code class=\"language-text\">getElementById</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> hex <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changeColorMode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"button-handling\" style=\"position:relative;\"><a href=\"#button-handling\" aria-label=\"button handling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Button Handling</h3>\n<p>First and foremost, let's define what we want our button to do. I think it'd be\npretty cool if instead of the default background color getting set, you could\nset the text color instead. To keep track we're going to need:</p>\n<ol>\n<li>a variable to tell us the current \"mode\" of color we're in (i.e. <em>are we</em>\n<em>changing the background color or the text color?</em>)</li>\n<li>a function to call when the button is clicked</li>\n</ol>\n<p>Lucky for us, there are pretty simple. Add the following into <code class=\"language-text\">script.js</code>\nunderneath your existing variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> colorIsBg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">changeColorMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  colorIsBg <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>colorIsBg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbutton<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> changeColorMode<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we define a function called <code class=\"language-text\">changeColorMode</code> that will set our tracker\nvariable <code class=\"language-text\">colorIsBg</code> to the opposite of whatever it was before. This is called\n<em>toggling</em>.</p>\n<p>Lastly, we once again use the DOM's built-in <code class=\"language-text\">onclick</code> detection to make our\nlives wayyyyy easier. Basically, we can access any element we want on the page,\nset its <code class=\"language-text\">onclick</code> property to any function we want, and the browser will do all\nthe heavy-lifting! Isn't the DOM magical? ‚ú®üîÆ‚ú®</p>\n<h3 id=\"time-to-find-the-time\" style=\"position:relative;\"><a href=\"#time-to-find-the-time\" aria-label=\"time to find the time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time to Find the Time</h3>\n<p>Okay, so here's the real bulk of the project. Let's start off just by defining a\nfunction called <code class=\"language-text\">updateClock</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that our function takes in no parameters!</p>\n<p>Just like above, we're going to need some variables to help us keep track of the\ntime. Define them like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> hours <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> minutes <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> seconds <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ampm <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that we use the <code class=\"language-text\">Date</code> object which is built into JavaScript by default.\nIt is <strong>super</strong> useful.</p>\n<h3 id=\"color-calculation-1Ô∏è‚É£1Ô∏è‚É£\" style=\"position:relative;\"><a href=\"#color-calculation-1%EF%B8%8F%E2%83%A31%EF%B8%8F%E2%83%A3\" aria-label=\"color calculation 1Ô∏è‚É£1Ô∏è‚É£ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Color Calculation 1Ô∏è‚É£+1Ô∏è‚É£=üî¥</h3>\n<p>Since we have the benefit of working on a project that Hack has already ran\nthrough and tested, we know that we are going to need another function to\ncalculate the color, or else things will look ugly and we don't want that! Make\none like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'rgb('</span> <span class=\"token operator\">+</span> <span class=\"token function\">time2color</span><span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> seconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And then <strong>outside</strong> of your existing <code class=\"language-text\">updateClock</code> function, define the\n<code class=\"language-text\">time2color</code> function like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">time2color</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> seconds</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Basically, the <code class=\"language-text\">time2color</code> function will return a string (i.e. a bit of text)\nthat looks like this: <code class=\"language-text\">128, 14, 240</code>. Sadly, the browser does not know that\nthose numbers are RGB values, so we have to tell it that by wrapping them in the\n<code class=\"language-text\">rgb(...)</code> specifier for CSS.</p>\n<p>Put together, the <code class=\"language-text\">color</code> variable will be a string that looks like this:\n<code class=\"language-text\">rgb(128, 14, 240)</code>, which is <em>just</em> how you set color in regular CSS even\nwithout all this crazy JavaScript.</p>\n<h3 id=\"Ô∏è-pit-stop-Ô∏è-1\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-pit-stop-%EF%B8%8F-1\" aria-label=\"Ô∏è pit stop Ô∏è 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‚ö†Ô∏è Pit Stop ‚ö†Ô∏è</h3>\n<p>Take a break and relax a bit! Have some food, chat up your partner, or talk to a\nmentor. But also make sure that your <code class=\"language-text\">script.js</code> file looks like the following\nby now:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> time <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clock'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> hex <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeColorMode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> colorIsBg <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">changeColorMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  colorIsBg <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>colorIsBg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbutton<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> changeColorMode<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> hours <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> minutes <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> seconds <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> ampm <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'rgb('</span> <span class=\"token operator\">+</span> <span class=\"token function\">time2color</span><span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> seconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">time2color</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> seconds</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>When you're done stretching your fingers from all this exercise, come back and\nlet's do some more work on these functions! ü§ì</p>\n<h3 id=\"hours-are-the-new-red\" style=\"position:relative;\"><a href=\"#hours-are-the-new-red\" aria-label=\"hours are the new red permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hours Are The New Red</h3>\n<p>This next section is going to happen all within your <code class=\"language-text\">timeToColor</code> function! So\nmake sure of that!</p>\n<p>Basically, we are going to be using an array, which is just a list of values,\nand we are going to \"push\" (or \"add\") values to that array. Specifically, we are\ngoing to be adding the red, green, and blue values that we calculate.</p>\n<p>But how do we do this crazy calculation?</p>\n<p>Well! Fret not! It is actually a pretty simple calculation. In words, we are\ngoing to be:</p>\n<ol>\n<li>getting the fraction of the time that it is</li>\n<li>multipling that fraction by 255 to get the equivalent fraction of color</li>\n</ol>\n<p>First, define that array I mentioned:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, let's calculate red. Red is going to be based on the current hour. Since\nthere are 24 hours in a day, and we get the hour in 24-hour format (i.e. if it's\n6pm we get 18 for the hour), then this actually works out great. Insert this\nunderneath your array:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> rawRed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">/</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You might be wondering <em>Why \"raw\" red?</em> Well, this is because Safari is buggy\nwith fractional RGB values, so we are going to have to round this value.</p>\n<p>Round like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> roundedRed <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>rawRed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Math</code> is a pre-installed JavaScript library that has a small number of useful\nfunction like square root, rounding, and exponentials.</p>\n<p>The rest is pretty similar, with the very notable exception that there are\n<strong>not</strong> 24 minutes in an hour, nor are there 24 seconds in a minute. So when you\ncalculate, take note of that.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> rawGreen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>minutes <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> roundedGreen <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>rawGreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> rawBlue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> roundedBlue <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>rawBlue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cool! We've done our calculations. Now, let's add these nice, rounded values to\nthe array.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>roundedRed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>roundedGreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>roundedBlue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Note</strong> that the order here matters! If you change the order, you will no\nlonger be mapping the same time measurement to the same color value.</p>\n<p>To wrap up <code class=\"language-text\">time2color</code>, let's return this array as a string by calling another\nbuilt-in function called <code class=\"language-text\">join</code>, which will basically go through this array and\ncreate a string, separating the values with whatever character we give it. (i.e.\nif result was [240, 14, 134], after calling <code class=\"language-text\">join</code> it would be \"240, 14, 134\").</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Congratulations! üéâ Your <code class=\"language-text\">time2color</code> function is done! We're almost there.</p>\n<p>But, first, make sure your function in its entirety is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">time2color</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> seconds</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> rawRed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">/</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> roundedRed <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>rawRed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> rawGreen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>minutes <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> roundedGreen <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>rawGreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> rawBlue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> roundedBlue <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>rawBlue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>roundedRed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>roundedGreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>roundedBlue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"12-hour-clock-problems\" style=\"position:relative;\"><a href=\"#12-hour-clock-problems\" aria-label=\"12 hour clock problems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12 Hour Clock Problems</h3>\n<p>Even though it makes our lives more difficult, people are generally accustomed\nto seeing 12 hour clocks. You can go ahead and skip this part if you're fine\nshowing a 24-hour clock, but for everyone used to \"AM\" and \"PM,\" follow me!\n(Digitally, I mean, not in real life.)</p>\n<p><strong>Note</strong> that we are back to working in our <code class=\"language-text\">updateClock</code> function.</p>\n<p>The first step is pretty straightforward:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">>=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ampm <span class=\"token operator\">=</span> <span class=\"token string\">'PM'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  ampm <span class=\"token operator\">=</span> <span class=\"token string\">'AM'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If it is greater than 12 hours, then it is PM. Otherwise, it's AM.</p>\n<p>Some more formatting stuff is that, even if you only just noticed it now, clocks\nnever show minutes or seconds that are less than 10 without a leading zero (i.e.\nyou will never see 6:4:8 PM, you would see 6:04:08 PM (why the hours aren't\npadded is above my paygrade)).</p>\n<p>To handle this, add the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  seconds <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> seconds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minutes <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  minutes <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> minutes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Basically, if it is less than 10 minutes, the number has only one digit, and we\nvery nicely and simply prepend (add to the beginning) a 0. Aren't we considerate\ndevs! üòÅ</p>\n<p>Ok, now it's time to actually convert the hour to its 12-hour clock version. We\ndo this using the scarily-named <em>modulo operator</em>. This is basically just fancy\ntalk for \"remainder\" in division. So, how it works is <code class=\"language-text\">13 modulo 12</code> is 1,\nbecause 12 goes into 13 once with 1 left over. <code class=\"language-text\">18 modulo 12 == 6</code> because 12\ngoes into 18 with 6 left over. And anything less than 12 just returns itself\n(i.e. <code class=\"language-text\">8 modulo 12</code> is 8 because technically 12 goes into 8 zero times with 8\nleft over, math is weird, yeah).</p>\n<p>In JavaScript, instead of writing <code class=\"language-text\">modulo</code> we write <code class=\"language-text\">%</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">!=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  hours <span class=\"token operator\">=</span> hours <span class=\"token operator\">%</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  hours <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If hours is NOT equal to 12, then take its modulo. If it is 12, then it would\nbecome 0, so we just leave it as 12, or else we would show noon as 0. However,\nthis does not account for the 24th hour, which is NOT 12, so we take the modulo\nof it, which is 0 since <code class=\"language-text\">24 % 12 = 0</code> (12 goes into 24 twice with 0 left over).</p>\n<p>Once again, math is weird.</p>\n<p>But despite all the math weirdness, the rest from here on out is pure coding!</p>\n<h3 id=\"making-use-of-our-time\" style=\"position:relative;\"><a href=\"#making-use-of-our-time\" aria-label=\"making use of our time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making Use of Our Time</h3>\n<p>It will reassure you to know that all our values are calculated and it is\n<em>finally</em> time put them into use.</p>\n<p>First, we wanna format our time in a way that most users are familiar with\n(including you!). For most, this is:</p>\n<p><code class=\"language-text\">[hour]:[minute]:[second] AM/PM</code></p>\n<p>Basically, colon-separated followed by AM or PM. (If you are doing 24 hour\nclock, you can leave off the AM/PM, but I would still recommend the colons).</p>\n<p>Remember that <code class=\"language-text\">time</code> variable we defined oh-so-long-ago? Well, it's time to\nfinally use it! Use all them in fact! ‚ú®ü¶Ñ‚ú®</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">time<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> hours <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> minutes <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> seconds <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> ampm<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Every DOM object has an <code class=\"language-text\">innerHTML</code> property that allows you to pass it in HTML\nto render. We aren't passing in HTML, really, just plain text, but we're going\nto use this method nonetheless.</p>\n<p>Let's pass in the RGB value we calculated into the <code class=\"language-text\">hex</code> element that's going to\ndisplay that for us.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">hex<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"pull-the-lever-or-not\" style=\"position:relative;\"><a href=\"#pull-the-lever-or-not\" aria-label=\"pull the lever or not permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pull The Lever! (Or Not)</h3>\n<p>Remember how we also had the variable that we toggled depending on if the button\nwas clicked? Well it's time to finally use that too.</p>\n<p>Basically, the behavior we want is that <strong>if</strong> the <code class=\"language-text\">colorIsBg</code> variable is set\nto true, as it is by default, we want to change the background color. If\n<strong>not</strong>, then we are going to change the text color. In code, this behavior\nlooks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>colorIsBg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  time<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\n  hex<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\n  time<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n  hex<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You have to set the <code class=\"language-text\">time.style.color</code> and other values to <code class=\"language-text\">white</code> or else they\nwill never get reset and will always remain some random color, which we don't\nwant!</p>\n<h3 id=\"Ô∏è-pit-stop-Ô∏è-2\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-pit-stop-%EF%B8%8F-2\" aria-label=\"Ô∏è pit stop Ô∏è 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‚ö†Ô∏è Pit Stop ‚ö†Ô∏è</h3>\n<p>Your <code class=\"language-text\">updateClock</code> function should look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> hours <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> minutes <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> seconds <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> ampm <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'rgb('</span> <span class=\"token operator\">+</span> <span class=\"token function\">time2color</span><span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> seconds<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">>=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ampm <span class=\"token operator\">=</span> <span class=\"token string\">'PM'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    ampm <span class=\"token operator\">=</span> <span class=\"token string\">'AM'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seconds <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    seconds <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> seconds<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minutes <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    minutes <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> minutes<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">!=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hours <span class=\"token operator\">=</span> hours <span class=\"token operator\">%</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hours <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  time<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> hours <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> minutes <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> seconds <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> ampm<span class=\"token punctuation\">;</span>\n\n  hex<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>colorIsBg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\n    hex<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\n    body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span>\n    time<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n    hex<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"finishing-touches\" style=\"position:relative;\"><a href=\"#finishing-touches\" aria-label=\"finishing touches permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Finishing Touches</h3>\n<p>Ooooooooookay, this is all looking super cool and neat, but we haven't actually\n<em>called</em> the functions yet. So if you were to run this file, nothing would\nhappen.</p>\n<p>Let's change that!</p>\n<p>Underneath your <code class=\"language-text\">updateClock</code> function, type out this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">updateClock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>updateClock<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">setInterval</code> is a built-in JavaScript function that will call any function we\ngive it at a certain time interval we give it. In this case, it will call\n<code class=\"language-text\">updateClock</code> every 1000 milliseconds (1 second).</p>\n<p>We call <code class=\"language-text\">updateClock</code> manually as a small edge case because if we don't, then\nthe page will be white for a second upon loading! üò±</p>\n<h3 id=\"finishing-finishing-touches\" style=\"position:relative;\"><a href=\"#finishing-finishing-touches\" aria-label=\"finishing finishing touches permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Finishing Finishing Touches</h3>\n<p>Now that this is all done, let's finally link in the script into our\n<code class=\"language-text\">index.html</code>.</p>\n<p>Underneath your <code class=\"language-text\">&lt;p id=\"hex\"></code>, right <strong>before</strong> the body closes, insert this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"step-5-oooh-pretty-clock\" style=\"position:relative;\"><a href=\"#step-5-oooh-pretty-clock\" aria-label=\"step 5 oooh pretty clock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5: oooh pretty clock!</h2>\n<p>Open up the <code class=\"language-text\">index.html</code> file in your browser and you should have a working Hex\nClock! (On that note, the name is technically wrong. The original version of\nthis clock used hex codes instead, but why do the extra conversion? Anyways, it\nshould be RGB clock)</p>\n<p>But naming aside, throw a round of applause for yourself! üëèüëèüëè You did it!</p>\n<p>Oh and by the way, do you happen to have the time? <sup><sup>hahahahahaha</sup></sup></p>","frontmatter":{"date":"2018-10-24","title":"Hackschool: Javascript and the DOM","subtitle":"Session 3 Frontend"}}},"pageContext":{"slug":"/posts/fall2018/hackschool-session-3-frontend/"}}}